package LeetCode.Medium.LongestSubstring;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.util.HashMap;
import java.util.Map;
public class LongestSubstringWithoutRepeatingCharacters {
    public int lengthOfLongestSubstring(String s) {
        // if(s.length()==0)return 0;//Falls leerer String uebergeben wird
        
        Map<Character, Integer> chars=new HashMap<>();
        char[] charArr=s.toCharArray();
        int start=0;
        int  max_length=0;

        for(int i=0;i<s.length();i++){
            char c=charArr[i];
            if(chars.containsKey(c)&&chars.get(c)>=start)
            {
                start=chars.get(c);//Start Wert wird auf index des ersten doppelten Chars gesetzt
            }
            chars.put(c, i);
            max_length=Math.max(max_length, i-start);//max_length dann ersetzt, wenn der Index des Elements minus des jetztigen Startelements groesser ist als der alte max Wert
        }
        return max_length;
    }

    public static void main(String[] args) {
        LongestSubstringWithoutRepeatingCharacters s=new LongestSubstringWithoutRepeatingCharacters();
        s.lengthOfLongestSubstring("pwwkew");//gibt 3 zurueck, da die laengste Folge einzigartiger Charaktere kew ist und somit 3 Charaktere lang

    }
}
